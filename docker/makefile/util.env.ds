fn prepare_envvars
    cur_dir = pwd

    project_base = join_path ${cur_dir} ../
    set_env PROJECT_BASE ${project_base}

    env_file = get_env ENV_FILE
    if is_empty ${env_file}
        env_file = set .env
        env_file = join_path ${cur_dir} ${env_file}
        set_env ENV_FILE ${env_file}
    end

    data_dir = get_env DATA_DIR
    if is_empty ${data_dir}
        data_dir = set ./.data
        data_dir = join_path ${cur_dir} ${data_dir}
        set_env DATA_DIR ${data_dir}
    end

    project_name = get_env PROJECT_NAME
    if is_empty ${project_name}
        set_env PROJECT_NAME gsapi
    end
end

fn check_env
    # Check .env
    env_file = get_env ENV_FILE
    env_file_exist = is_file ${env_file}
    if not ${env_file_exist}
        error_msg = set "${env_file} does not exist. Please make `${env_file}` first."
        echo ${error_msg}
        trigger_error ${error_msg}
    end
end

fn get_env_map
    env_file = get_env ENV_FILE
    env_content = readfile "${env_file}"
    env_map = map
    map_load_properties ${env_map} "${env_content}"
    return ${env_map}
end

fn replace_env_value
    env_map = get_env_map
    text = set "${1}"

    for key in ${2}
        pattern = concat "{{" "${key}" "}}"
        val = map_get ${env_map} "${key}"
        text = replace "${text}" "${pattern}" "${val}"
    end

    release ${env_map}
    return ${text}
end
