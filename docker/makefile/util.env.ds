fn prepare_envvars
    cur_dir = pwd

    project_base = join_path ${cur_dir} ../
    set_env PROJECT_BASE ${project_base}

    env_file = get_env ENV_FILE
    if is_empty ${env_file}
        env_file = set .env
        env_file = join_path ${cur_dir} ${env_file}
        set_env ENV_FILE ${env_file}
    end

    # Get `DATA_DIR` and `PROJECT_NAME` from `ENV_FILE`
    env_map = get_env_map "${env_file}"
    data_dir = map_get ${env_map} DATA_DIR
    project_name = map_get ${env_map} PROJECT_NAME
    release ${env_map}

    # Fix empty env vars
    if is_empty ${data_dir}
        data_dir = get_env DATA_DIR
    end
    if is_empty ${data_dir}
        data_dir = set ./.data
        data_dir = join_path ${cur_dir} ${data_dir}
    end
    set_env DATA_DIR "${data_dir}"

    if is_empty ${project_name}
        project_name = get_env PROJECT_NAME
    end
    if is_empty ${project_name}
        project_name = set "gsapi"
    end
    set_env PROJECT_NAME "${project_name}"
end

fn check_env
    # Check .env
    env_file = get_env ENV_FILE
    env_file_exist = is_file ${env_file}
    if not ${env_file_exist}
        error_msg = set "${env_file} does not exist. Please make `${env_file}` first."
        echo ${error_msg}
        trigger_error ${error_msg}
    end
end

fn get_env_map
    env_file = get_env ENV_FILE
    env_content = readfile "${1}"
    env_map = map
    map_load_properties ${env_map} "${env_content}"
    return ${env_map}
end

fn replace_env_values
    text = set "${1}"
    env_map_keys = map_keys ${2}

    for env_key in ${env_map_keys}
        env_slot = concat "{{" "${env_key}" "}}"
        env_val = map_get ${2} "${env_key}"
        text = replace "${text}" "${env_slot}" "${env_val}"
    end

    release ${env_map_keys}
    return ${text}
end

fn replace_env_values_in_file
    env_map = get_env_map "${1}"
    text_src = readfile "${2}"
    text_tar = replace_env_values "${text_src}" ${env_map}
    writefile "${3}" "${text_tar}"
    release ${env_map}
end
